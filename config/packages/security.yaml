security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 'bcrypt'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
    # used to reload user from session & other features (e.g. switch_user)
        users:
            entity:
                class: App\Security\User
                property: email
        jwt:
            lexik_jwt:
                class: App\Security\User
        keycloak:
            id: app.keycloak_provider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: jwt
            custom_authenticators:
              - App\Security\Authenticator\KeycloakAuthenticator
            # # jwt: ~


        main:
            stateless: true
            provider: users
            json_login:
                username_path: email
                password_path: password
                check_path: /auth
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
              #authenticator: app.custom_authenticator
                # activate different ways to authenticate
                # https://symfony.com/doc/current/security.html#the-firewall

                # https://symfony.com/doc/current/security/impersonating_user.html
                # switch_user: true
 
    role_hierarchy:
        ROLE_ADMINISTRATOR: ROLE_ADMINISTRATOR
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_STUDENT: [ROLE_STUDEN] 
        ROLE_TEACHER: [ROLE_TEACHER] 
        ROLE_PARENT: [ROLE_PARENT] 

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/$, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/api/graphql, roles: PUBLIC_ACCESS } # Allows registering new users
        - { path: ^/api/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI docs
        - { path: ^/api/auth, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
